#!/usr/bin/env python

import os.path
from pathlib import Path
from subprocess import Popen, PIPE, check_output
import py_compile

# git config core.hooksPath ./git.hooks
BASE_DIR, hooks_folder = os.path.split(os.path.dirname(os.path.abspath(__file__)))

code_result = 0

# pushing of non-compile projects restriction.
for root, dirs, files in os.walk(BASE_DIR, topdown=True):
    if root.find('env') == -1 and root.find('__pycache__') == -1 and root.find('.git') == -1 and root.find(
            '.idea') == -1:
        for name in files:
            if name.find('.py') != -1:
                try:
                    py_compile.compile(os.path.join(root, name), doraise=True)
                except py_compile.PyCompileError as err:
                    print('One or more files are not compiling.')
                    print(err.exc_value)
                    code_result += 1


# pushing to master branch restriction.
def runBash(command):
    process = Popen(command, shell=True, stdout=PIPE)
    out = process.stdout.read().strip()
    return out


if str(runBash('git symbolic-ref HEAD')).find("master") != -1:
    print("You are not allowed commit changes in master branch")
    code_result = 1

# check_output(f"python -m unittest discover -t ..", cwd=Path(BASE_DIR, ""), shell=True)

exit(code_result)


